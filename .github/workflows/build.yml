name: Build

on:
  push:
    tags:
      - '*'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: grpc-gateway

jobs:
  build:
    runs-on: ubuntu-latest

    # This allows the `GITHUB_TOKEN` to push packages
    # See: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v4

      # https://github.com/actions/checkout/issues/290
      - name: Fix tags
        run: |
          git fetch --tags --force

      - name: Install nix
        uses: cachix/install-nix-action@v21
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(nix develop --command pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          nix develop --command pnpm install

      - name: Build all
        run: |
          nix develop --command ./.ci/all-ci build $(git describe)

      - name: Deploy all
        run: |
          nix develop --command ./.ci/all-ci deploy
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUF_TOKEN: ${{ secrets.BUF_TOKEN }}

        # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
          # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
          # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: go/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
